name: Deploy to AWS

on:
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create publish directory if not exists
        run: mkdir -p ~/publish/
        
      - name: Build and package
        run: |
          dotnet build ./src/WorkerServiceExample.Service/WorkerServiceExample.Service.csproj --configuration Release 
          dotnet publish ./src/WorkerServiceExample.Service/WorkerServiceExample.Service.csproj --configuration Release --runtime centos.7-x64 --self-contained --output ./publish
          cp -rf scripts/deploy/* ~/publish/

      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Authorize security group ingress
        id: authorize_security_group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_SECURITY_GROUP \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Get all instances associated with tags and Deploy
        run: |
          targed_instances=$(aws ec2 describe-instances --region $AWS_REGION --filters "Name=instance.group-id,Values=$AWS_SECURITY_GROUP" "Name=tag:application-type,Values=background-service,multiple" --query "Reservations[*].Instances[*].PublicDnsName")
          targed_instances_count=$(echo "$targed_instances" | jq '. | length')
          echo "Total of instances is $targed_instances_count"
          cd ~/.ssh
          for ((i = 0; i < $targed_instances_count; i++)); do
            instance_public_dns=$(echo "$targed_instances" | jq -r ".[${i}][0]")

            if [ "$instance_public_dns" == "null" ] || [ -z "$instance_public_dns" ]; then
              echo "No public DNS to $instance_public_dns"
            else
              echo "Copying files to $instance_public_dns"
              ls ./publish/
              scp -o 'StrictHostKeyChecking no' ~/publish/src/WorkerServiceExample.Service/bin/Release/net7.0/centos.7-x64/publish/*.{json,so,dll} ec2-user@$instance_public_dns:/home/ec2-user/workerserviceexample
              scp -o 'StrictHostKeyChecking no' ~/publish/scripts/deploy/update-appsettings.sh ec2-user@$instance_public_dns:/home/ec2-user/workerserviceexample
              ssh -o 'StrictHostKeyChecking no' ec2-user@$instance_public_dns "sudo chmod 744 /home/ec2-user/workerserviceexample/update-appsettings.sh"
              echo "Files copied to $instance_public_dns"

              echo "Start update in $instance_public_dns"
              ssh -o 'StrictHostKeyChecking no' ec2-user@$instance_public_dns "sudo /home/ec2-user/workerserviceexample/update-appsettings.sh"
              echo "Server updated successfully in $instance_public_dns"
            fi
          done

      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_SECURITY_GROUP \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32